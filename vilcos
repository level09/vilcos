#!/bin/bash

# Vilcos command-line helper
# Usage: ./vilcos <command>

# Colors
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
RED='\033[0;31m'
NC='\033[0m' # No Color

# Show banner
show_banner() {
  echo -e "${BLUE}"
  echo "╔═════════════════════════════════════════════════════════════╗"
  echo "║                 VILCOS WEBSITE BUILDER                      ║"
  echo "║         AI-Powered Website Template Management              ║"
  echo "╚═════════════════════════════════════════════════════════════╝"
  echo -e "${NC}"
}

# Display help
show_help() {
  show_banner
  echo -e "Usage: ${YELLOW}./vilcos <command>${NC}"
  echo
  echo "Available commands:"
  echo -e "  ${GREEN}start${NC}       Start Vilcos in development mode"
  echo -e "  ${GREEN}dev${NC}         Start only the Vite development server"
  echo -e "  ${GREEN}watch${NC}       Start only the file watcher"
  echo -e "  ${GREEN}ai${NC}          Start only the Chainlit AI interface"
  echo -e "  ${GREEN}publish${NC}     Publish the static site"
  echo -e "  ${GREEN}deploy${NC}      Deploy static site with Docker"
  echo -e "  ${GREEN}install${NC}     Install all dependencies"
  echo -e "  ${GREEN}clean${NC}       Clean generated files"
  echo -e "  ${GREEN}logs${NC}        Show logs"
  echo -e "  ${GREEN}help${NC}        Show this help message"
  echo
  echo -e "Examples:"
  echo -e "  ${YELLOW}./vilcos start${NC}     # Start all services"
  echo -e "  ${YELLOW}./vilcos logs ai${NC}   # Show Chainlit logs"
  echo -e "  ${YELLOW}./vilcos deploy${NC}    # Deploy static site with Docker"
  echo
}

# Check if a command is installed
check_command() {
  if ! command -v $1 &> /dev/null; then
    echo -e "${RED}Error: $1 is required but not found${NC}"
    exit 1
  fi
}

# Create default templates if they don't exist
create_default_templates() {
  echo -e "${YELLOW}Checking for template files...${NC}"
  
  # Create templates directory if it doesn't exist
  mkdir -p templates/src
  
  # Copy default templates if they don't exist
  if [ ! -f "templates/index.html" ]; then
    echo -e "${YELLOW}Creating default template files...${NC}"
    
    # Copy index.html
    cp assets/default-templates/index.html templates/
    
    # Copy src files
    cp assets/default-templates/src/main.js templates/src/
    cp assets/default-templates/src/style.css templates/src/
    
    echo -e "${GREEN}Default templates created successfully!${NC}"
  else
    echo -e "${GREEN}Template files already exist.${NC}"
  fi
}

# Install dependencies
install_deps() {
  echo -e "${YELLOW}Installing dependencies...${NC}"
  
  # Check for Python
  check_command python3
  
  # Check for npm
  check_command npm
  
  # Set up Python environment
  if [ ! -d ".venv" ]; then
    echo -e "${YELLOW}Creating virtual environment...${NC}"
    python3 -m venv .venv
  fi
  
  source .venv/bin/activate
  echo -e "${YELLOW}Installing Python dependencies...${NC}"
  pip install -r requirements.txt
  
  # Install npm dependencies
  echo -e "${YELLOW}Installing npm dependencies...${NC}"
  npm install
  
  # Create default templates
  create_default_templates
  
  echo -e "${GREEN}Dependencies installed successfully!${NC}"
}

# Start all services
start_all() {
  echo -e "${YELLOW}Starting Vilcos...${NC}"
  
  # Ensure we have default templates
  create_default_templates
  
  ./start.sh
}

# Start only Vite dev server
start_dev() {
  echo -e "${YELLOW}Starting Vite development server...${NC}"
  
  # Ensure we have default templates
  create_default_templates
  
  npm run dev
}

# Start file watcher
start_watch() {
  echo -e "${YELLOW}Starting file watcher...${NC}"
  npm run watch
}

# Start Chainlit
start_ai() {
  echo -e "${YELLOW}Starting Chainlit AI interface...${NC}"
  source .venv/bin/activate
  chainlit run app.py
}

# Publish static site
publish_site() {
  echo -e "${YELLOW}Publishing static site...${NC}"
  ./publish.sh
}

# Deploy with Docker
deploy_site() {
  echo -e "${YELLOW}Deploying static site with Docker...${NC}"
  chmod +x ./deploy.sh
  ./deploy.sh "$@"
}

# Clean generated files
clean_files() {
  echo -e "${YELLOW}Cleaning generated files...${NC}"
  rm -rf dist public node_modules .venv __pycache__ .chainlit
  echo -e "${GREEN}Cleanup complete!${NC}"
}

# Show logs
show_logs() {
  LOG_TYPE=${1:-all}
  
  case $LOG_TYPE in
    ai|chainlit)
      echo -e "${YELLOW}Showing Chainlit logs...${NC}"
      tail -f /tmp/chainlit.log
      ;;
    web|vite)
      echo -e "${YELLOW}Showing Vite logs...${NC}"
      tail -f /tmp/vite.log
      ;;
    watch|watcher)
      echo -e "${YELLOW}Showing watcher logs...${NC}"
      tail -f /tmp/watcher.log
      ;;
    all)
      echo -e "${YELLOW}Showing all logs...${NC}"
      tail -f /tmp/chainlit.log /tmp/vite.log /tmp/watcher.log
      ;;
    *)
      echo -e "${RED}Unknown log type: $LOG_TYPE${NC}"
      echo -e "Available log types: ai, web, watch, all"
      exit 1
      ;;
  esac
}

# Make this script executable
if [ ! -x "$0" ]; then
  chmod +x "$0"
fi

# Handle command
if [ $# -eq 0 ]; then
  show_help
  exit 0
fi

COMMAND=$1
shift

case $COMMAND in
  start)
    start_all
    ;;
  dev)
    start_dev
    ;;
  watch)
    start_watch
    ;;
  ai)
    start_ai
    ;;
  publish)
    publish_site
    ;;
  deploy)
    deploy_site "$@"
    ;;
  install)
    install_deps
    ;;
  clean)
    clean_files
    ;;
  logs)
    show_logs $1
    ;;
  help)
    show_help
    ;;
  *)
    echo -e "${RED}Unknown command: $COMMAND${NC}"
    show_help
    exit 1
    ;;
esac 